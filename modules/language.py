import json

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–µ—Ä–µ–∫–ª–∞–¥—ñ–≤
translations = {
    "en": {
        # Main
        "main_menu": "Main Menu",
        "task1": "Execute Task 1 (Request Processing)",
        "task2": "Execute Task 2 (Palindrome Check)",
        "task3": "Execute Task 3 (Bracket Check)",
        "exit": "Exit",
        "enter_command": "Enter a command",
        "goodbye": "Thank you for using the program! Goodbye!",
        "welcome": "Welcome to the program!",
        "topic": "Topic: Basic Data Structures (goit-algo-hw-02)",
        "lets_go": "Let's go!",
        "unknown_command": "Unknown command. Please try again.",
        "press_enter": "Press Enter to continue...",
        "change_language": "Change language",
        "stack": "Stack",
        "stack_explanation": "Stack content (shows the sequence of unmatched brackets):",

        # Task 1
        "create_request": "Create a request",
        "process_request": "Process a request",
        "queue_status": "Queue status",
        "request_created": "Request created",
        "processing_request": "Processing request",
        "request_processed": "Request processed",
        "queue_full": "The queue is full. Cannot add a new request.",
        "queue_empty": "The queue is empty. No requests to process.",
        "current_queue": "Current queue:",

        # Task 2
        "enter_text": "Enter a string to check",
        "palindrome": "This is a palindrome",
        "not_palindrome": "This is not a palindrome",
        "empty_input": "Input cannot be empty!",
        "show_examples": "Show examples of palindromes",
        "generate_random": "Generate a random string",
        "palindrome_examples": "Examples of palindromes:",
        "random_string": "Generated random string",

        # Task 3
        "checking_expression": "Checking expression",
        "balanced": "Balanced",
        "not_balanced": "Not balanced",
        "input_expression": "Enter an expression to check",
        "checking_random_expressions": "Checking 5 random expressions...",
        "generate_random_expressions": "Generate and check 5 random expressions",
        "at_position": "at position",
        "doesnt_match": "doesn't match",
        "not_closed": "not closed",
        "no_brackets": "No brackets found in the expression"
    },
    "uk": {
        # Main
        "main_menu": "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é",
        "task1": "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è 1 (–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–æ–∫)",
        "task2": "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è 2 (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º)",
        "task3": "–í–∏–∫–æ–Ω–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è 3 (–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥—É–∂–æ–∫)",
        "exit": "–í–∏—Ö—ñ–¥",
        "enter_command": "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É",
        "goodbye": "–î—è–∫—É—î–º–æ –∑–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏! –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!",
        "welcome": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏!",
        "topic": "–¢–µ–º–∞: –û—Å–Ω–æ–≤–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö (goit-algo-hw-02)",
        "lets_go": "–ü–æ—ó—Ö–∞–ª–∏!",
        "unknown_command": "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
        "press_enter": "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è...",
        "change_language": "–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É",
        "stack": "–°—Ç–µ–∫",
        "stack_explanation": "–í–º—ñ—Å—Ç —Å—Ç–µ–∫—É (–ø–æ–∫–∞–∑—É—î –ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å –Ω–µ–ø–∞—Ä–Ω–∏—Ö –¥—É–∂–æ–∫):",

        # Task 1
        "create_request": "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—è–≤–∫—É",
        "process_request": "–û–±—Ä–æ–±–∏—Ç–∏ –∑–∞—è–≤–∫—É",
        "queue_status": "–°—Ç–∞—Ç—É—Å —á–µ—Ä–≥–∏",
        "request_created": "–ó–∞—è–≤–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–æ",
        "processing_request": "–û–±—Ä–æ–±–∫–∞ –∑–∞—è–≤–∫–∏",
        "request_processed": "–ó–∞—è–≤–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–æ",
        "queue_full": "–ß–µ—Ä–≥–∞ –ø–µ—Ä–µ–ø–æ–≤–Ω–µ–Ω–∞. –ù–µ–º–æ–∂–ª–∏–≤–æ –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∑–∞—è–≤–∫—É.",
        "queue_empty": "–ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è. –ù–µ–º–∞—î –∑–∞—è–≤–æ–∫ –¥–ª—è –æ–±—Ä–æ–±–∫–∏.",
        "current_queue": "–ü–æ—Ç–æ—á–Ω–∞ —á–µ—Ä–≥–∞:",

        # Task 2
        "enter_text": "–í–≤–µ–¥—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
        "palindrome": "–¶–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º",
        "not_palindrome": "–¶–µ –Ω–µ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º",
        "empty_input": "–í–≤–µ–¥–µ–Ω–Ω—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º!",
        "show_examples": "–ü–æ–∫–∞–∑–∞—Ç–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—ñ–≤",
        "generate_random": "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫",
        "palindrome_examples": "–ü—Ä–∏–∫–ª–∞–¥–∏ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º—ñ–≤:",
        "random_string": "–ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ä—è–¥–æ–∫",

        # Task 3
        "checking_expression": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏—Ä–∞–∑—É",
        "balanced": "–°–∏–º–µ—Ç—Ä–∏—á–Ω–æ",
        "not_balanced": "–ù–µ—Å–∏–º–µ—Ç—Ä–∏—á–Ω–æ",
        "input_expression": "–í–≤–µ–¥—ñ—Ç—å –≤–∏—Ä–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏",
        "checking_random_expressions": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ 5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤...",
        "generate_random_expressions": "–ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ 5 –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –≤–∏—Ä–∞–∑—ñ–≤",
        "at_position": "–Ω–∞ –ø–æ–∑–∏—Ü—ñ—ó",
        "doesnt_match": "–Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î",
        "not_closed": "–Ω–µ –∑–∞–∫—Ä–∏—Ç–æ",
        "no_brackets": "–£ –≤–∏—Ä–∞–∑—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥—É–∂–æ–∫"
    }
}

def translate(key, lang="en"):
    """–ü–µ—Ä–µ–∫–ª–∞–¥–∞—î —Ç–µ–∫—Å—Ç –∑–∞ –∫–ª—é—á–µ–º –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –≤–∏–±—Ä–∞–Ω–æ—ó –º–æ–≤–∏."""
    return translations.get(lang, translations["en"]).get(key, key)

def set_language():
    """–î–æ–∑–≤–æ–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É."""
    print("üåê –í–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose a language:")
    print("[1] English")
    print("[2] –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞")
    choice = input("üìù Enter choice (1 or 2): ").strip()

    if choice == '2':
        return "uk"
    return "en"
